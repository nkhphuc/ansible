---
- name: Ensure git is installed
  ansible.builtin.package:
    name: git
    state: present
  become: yes

- name: Set Git user configuration
  ansible.builtin.git_config:
    name: "{{ item.name }}"
    scope: global
    value: "{{ item.value }}"
  loop:
    - { name: 'user.name', value: 'nkhphuc' }
    - { name: 'user.email', value: 'nkhphuc@gmail.com' }
  become: yes
  become_user: "{{ ansible_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: Check GitHub connectivity
  ansible.builtin.uri:
    url: https://github.com
    method: GET
  register: github_check
  failed_when: github_check.status != 200

- name: Check if repository exists
  ansible.builtin.stat:
    path: "{{ project_directory }}/.git"
  register: git_repo_stat

- name: Get latest commit hash from remote
  ansible.builtin.command:
    cmd: git ls-remote {{ github_repo_url }} {{ github_repo_branch }}
  register: remote_head
  changed_when: false
  when: git_repo_stat.stat.exists

- name: Get current local commit hash
  ansible.builtin.command:
    cmd: git rev-parse HEAD
  args:
    chdir: "{{ project_directory }}"
  become: yes
  become_user: "{{ ansible_user }}"
  vars:
    ansible_ssh_pipelining: true
  register: local_head
  changed_when: false
  when: git_repo_stat.stat.exists

- name: Check if Docker containers are running
  command: docker ps -q -f name=template7pg
  register: docker_running
  changed_when: false

- name: Set update_needed fact
  set_fact:
    update_needed: >-
      {{ not git_repo_stat.stat.exists or
         (remote_head.stdout.split()[0] != local_head.stdout) or
         docker_running.stdout == '' }}

- name: Clone/update the GitHub repository
  ansible.builtin.git:
    repo: "{{ github_repo_url }}"
    version: "{{ github_repo_branch }}"
    dest: "{{ project_directory }}"
    update: yes
    force: yes
    depth: 1
  become: yes
  become_user: "{{ ansible_user }}"
  vars:
    ansible_ssh_pipelining: true
  when: update_needed
  async: 120
  poll: 10

- name: Copy .env file if it exists
  ansible.builtin.copy:
    src: "{{ env_file_path }}"
    dest: "{{ project_directory }}/.env"
  when: env_file_path is defined and update_needed

- name: Check if Docker Compose is installed
  command: docker compose version
  register: docker_compose_check
  ignore_errors: yes
  changed_when: false

- name: Install Docker Compose if not present
  block:
    - name: Install Docker Compose for Amazon Linux
      dnf:
        name: docker-compose
        state: present
      when: ansible_distribution == "Amazon"

    - name: Install Docker Compose for Ubuntu
      apt:
        name: docker-compose-plugin
        state: present
      when: ansible_distribution == "Ubuntu"
  when: docker_compose_check.rc != 0
  become: yes

- name: Set environment-specific Docker Compose file
  set_fact:
    docker_compose_env_file: >-
      {%- if rails_env == 'development' -%}
        docker-compose.override.yml
      {%- elif rails_env == 'production' -%}
        docker-compose.prod.yml
      {%- else -%}
        docker-compose.override.yml
      {%- endif -%}

- name: Set Docker Compose files based on Rails environment
  set_fact:
    compose_files:
      - "docker-compose.yml"
      - "{{ docker_compose_env_file }}"

- name: Set full permissions on project directory
  ansible.builtin.file:
    path: "{{ project_directory }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0777'
    recurse: yes
  become: yes
  when: update_needed

- name: Ensure all necessary directories exist with correct permissions
  ansible.builtin.file:
    path: "{{ project_directory }}/{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0777'
  loop:
    - log
    - tmp
    - public
  when: update_needed

- name: Ensure Rails log file exists and is writable
  ansible.builtin.file:
    path: "{{ project_directory }}/log/{{ rails_env }}.log"
    state: touch
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0666'
  when: update_needed

- name: Set base environment variables
  set_fact:
    base_env:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MASTER_KEY: "{{ rails_master_key }}"
      USER: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"

- name: Set environment-specific variables
  set_fact:
    env_specific_vars:
      development:
        DEV_DATABASE_HOST: "{{ dev_database_host | default('') }}"
        REDIS_URL: "{{ redis_url | default('') }}"
        DOMAIN: "{{ domain | default('') }}"
      production:
        PRO_DATABASE_HOST: "{{ pro_database_host | default('') }}"
        PRO_DATABASE_USERNAME: "{{ pro_database_username | default('') }}"
        PRO_DATABASE_PASSWORD: "{{ pro_database_password | default('') }}"
        REDIS_URL: "{{ redis_url | default('') }}"
        DOMAIN: "{{ domain | default('') }}"

- name: Combine environment variables
  set_fact:
    combined_env: "{{ base_env | combine(env_specific_vars[rails_env] | default({})) }}"

- name: Start Docker Compose services
  community.docker.docker_compose_v2:
    project_src: "{{ project_directory }}"
    files: "{{ compose_files }}"
    state: present
    recreate: always
  become: yes
  environment: "{{ combined_env }}"
  when: update_needed
