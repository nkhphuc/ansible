---
- name: Ensure git is installed
  ansible.builtin.package:
    name: git
    state: present
  become: yes

- name: Check GitHub connectivity
  ansible.builtin.uri:
    url: https://github.com
    method: GET
  register: github_check
  failed_when: github_check.status != 200

- name: Check if repository exists
  ansible.builtin.stat:
    path: "{{ project_directory }}/.git"
  register: git_repo_stat

- name: Get latest commit hash from remote
  ansible.builtin.command:
    cmd: git ls-remote {{ github_repo_url }} {{ github_repo_branch }}
  register: remote_head
  changed_when: false
  when: git_repo_stat.stat.exists

- name: Get current local commit hash
  ansible.builtin.command:
    cmd: git rev-parse HEAD
  args:
    chdir: "{{ project_directory }}"
  register: local_head
  changed_when: false
  when: git_repo_stat.stat.exists

- name: Check if Docker containers are running
  command: docker ps -q -f name=template7pg
  register: docker_running
  changed_when: false

- name: Set update_needed fact
  set_fact:
    update_needed: >-
      {{ not git_repo_stat.stat.exists or
         (remote_head.stdout.split()[0] != local_head.stdout) or
         docker_running.stdout == '' }}

- name: Clone the GitHub repository
  ansible.builtin.git:
    repo: "{{ github_repo_url }}"
    version: "{{ github_repo_branch }}"
    dest: "{{ project_directory }}"
    force: yes
  when: update_needed
  async: 120
  poll: 10

- name: Copy .env file if it exists
  ansible.builtin.copy:
    src: "{{ env_file_path }}"
    dest: "{{ project_directory }}/.env"
  when: env_file_path is defined and update_needed

- name: Check if Docker Compose is installed
  command: docker compose version
  register: docker_compose_check
  ignore_errors: yes
  changed_when: false

- name: Install Docker Compose if not present
  block:
    - name: Install Docker Compose
      dnf:
        name: docker-compose
        state: present
      become: yes

  when: docker_compose_check.rc != 0

- name: Set environment-specific Docker Compose file
  set_fact:
    docker_compose_env_file: >-
      {%- if rails_env == 'development' -%}
        docker-compose.override.yml
      {%- elif rails_env == 'staging' -%}
        docker-compose.staging.yml
      {%- elif rails_env == 'production' -%}
        docker-compose.prod.yml
      {%- else -%}
        docker-compose.override.yml
      {%- endif -%}

- name: Set Docker Compose files based on Rails environment
  set_fact:
    compose_files:
      - "docker-compose.yml"
      - "{{ docker_compose_env_file }}"

- name: Set base environment variables
  set_fact:
    base_env:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MASTER_KEY: "{{ rails_master_key }}"

- name: Set environment-specific variables
  set_fact:
    env_specific_vars:
      development: {}
      staging:
        REDIS_URL_STAGING: "{{ redis_url_staging | default('') }}"
      production:
        REDIS_URL_PRODUCTION: "{{ redis_url_production | default('') }}"

- name: Combine environment variables
  set_fact:
    combined_env: "{{ base_env | combine(env_specific_vars[rails_env] | default({})) }}"

- name: Run Docker Compose
  community.docker.docker_compose_v2:
    project_src: "{{ project_directory }}"
    files: "{{ compose_files }}"
    state: present
  become: yes
  environment: "{{ combined_env }}"
  when: update_needed

- name: Wait for the application to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: "{{ app_port }}"
    delay: 10
    timeout: 60
  when: update_needed

- name: Check application connection
  ansible.builtin.uri:
    url: "http://localhost:{{ app_port }}"
    method: GET
  register: app_check
  retries: 5
  delay: 10
  until: app_check.status == 200
  changed_when: false
  when: update_needed
