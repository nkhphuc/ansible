---
- name: Ensure git is installed
  ansible.builtin.package:
    name: git
    state: present
  become: yes

- name: Clone the GitHub repository
  ansible.builtin.git:
    repo: "{{ github_repo_url }}"
    version: "{{ github_repo_branch }}"
    dest: "{{ project_directory }}"
    force: yes

- name: Copy .env file if it exists
  ansible.builtin.copy:
    src: "{{ env_file_path }}"
    dest: "{{ project_directory }}/.env"
  when: env_file_path is defined

- name: Install Docker Compose
  ansible.builtin.pip:
    name: docker-compose
    state: present
  become: yes

- name: Set Docker Compose files based on Rails environment
  set_fact:
    compose_files:
      - docker-compose.yml
      - "{{ docker_compose_env_file }}"

- name: Set environment-specific Docker Compose file
  set_fact:
    docker_compose_env_file: >-
      {% if rails_env == 'development' %}
      docker-compose.override.yml
      {% elif rails_env == 'staging' %}
      docker-compose.staging.yml
      {% elif rails_env == 'production' %}
      docker-compose.prod.yml
      {% else %}
      docker-compose.override.yml
      {% endif %}

- name: Set base environment variables
  set_fact:
    base_env:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MASTER_KEY: "{{ rails_master_key }}"

- name: Set environment-specific variables
  set_fact:
    env_specific_vars:
      development: {}
      staging:
        REDIS_URL_STAGING: "{{ redis_url_staging | default('') }}"
      production:
        REDIS_URL_PRODUCTION: "{{ redis_url_production | default('') }}"

- name: Combine environment variables
  set_fact:
    combined_env: "{{ base_env | combine(env_specific_vars[rails_env] | default({})) }}"

- name: Run Docker Compose
  community.docker.docker_compose:
    project_src: "{{ project_directory }}"
    files: "{{ compose_files }}"
    state: present
  become: yes
  environment: "{{ combined_env }}"

- name: Wait for the application to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: "{{ app_port }}"
    delay: 10
    timeout: 60

- name: Check application connection
  ansible.builtin.uri:
    url: "http://localhost:{{ app_port }}"
    method: GET
  register: app_check
  retries: 5
  delay: 10
  until: app_check.status == 200
  changed_when: false
