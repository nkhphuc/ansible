---
- name: Check if docker_network_name is defined
  set_fact:
    use_docker_network: "{{ docker_network_name is defined and docker_network_name | length > 0 }}"

- name: Create Docker network if it doesn't exist
  docker_network:
    name: "{{ docker_network_name }}"
    state: present
  when: use_docker_network | bool

- name: Check if DragonflyDB container exists
  docker_container_info:
    name: dragonflydb
  register: dragonflydb_container_info

- name: Check if DragonflyDB container is in the correct network
  command: docker network inspect {{ docker_network_name }}
  register: network_inspect
  changed_when: false
  failed_when: false
  when: use_docker_network | bool and dragonflydb_container_info.exists

- name: Set fact for network status
  set_fact:
    dragonflydb_in_network: >-
      {{ (network_inspect.stdout | from_json | first).Containers.values() | map(attribute='Name') | list | select('search', 'dragonflydb') | list | length > 0 }}
  when: use_docker_network | bool and dragonflydb_container_info.exists and network_inspect.stdout is defined and network_inspect.stdout | length > 0

- name: Remove existing DragonflyDB container if not in correct state or network
  docker_container:
    name: dragonflydb
    state: absent
  when: >
    dragonflydb_container_info.exists and
    (dragonflydb_container_info.container.State.Status != 'running' or
    (use_docker_network | bool and not dragonflydb_in_network | default(false)))

- name: Run DragonflyDB Docker container
  docker_container:
    name: dragonflydb
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    state: started
    restart_policy: always
    ports:
      - "{{ dragonfly_port }}:6379"
    expose:
      - "6379"
    networks: "{{ [{'name': docker_network_name}] if use_docker_network | bool else omit }}"

- name: Wait for DragonflyDB to be ready
  wait_for:
    host: localhost
    port: "{{ dragonfly_port }}"
    delay: 5
    timeout: 30

- name: Check DragonflyDB connection
  command: >
    docker exec dragonflydb redis-cli PING
  register: dragonflydb_check
  changed_when: false
  failed_when: dragonflydb_check.rc != 0
  retries: 3
  delay: 5
  until: dragonflydb_check.rc == 0

- name: Verify DragonflyDB container is in the correct network
  command: docker network inspect {{ docker_network_name }}
  register: network_verify
  changed_when: false
  failed_when: false
  when: use_docker_network | bool

- name: Check if dragonflydb is in the network
  set_fact:
    dragonflydb_in_network: >-
      {{ (network_verify.stdout | from_json | first).Containers.values() | map(attribute='Name') | list | select('search', 'dragonflydb') | list | length > 0 }}
  when: use_docker_network | bool and network_verify.stdout is defined and network_verify.stdout | length > 0

- name: Debug network information
  debug:
    msg:
      - "Network verify stdout: {{ network_verify.stdout | default('N/A') }}"
      - "DragonflyDB in network: {{ dragonflydb_in_network | default('N/A') }}"
  when: use_docker_network | bool

- name: Ensure DragonflyDB is connected to the network
  docker_network:
    name: "{{ docker_network_name }}"
    connected:
      - dragonflydb
    state: present
  when: use_docker_network | bool

- name: Fail if dragonflydb is not in the network
  fail:
    msg: "DragonflyDB container is not connected to the specified network"
  when: use_docker_network | bool and not dragonflydb_in_network | default(false)
