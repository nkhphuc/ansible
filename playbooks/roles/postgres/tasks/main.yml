---
- name: Check if PostgreSQL container exists
  docker_container_info:
    name: postgres
  register: postgres_container_info

- name: Check if PostgreSQL container is in the correct network
  docker_network:
    name: "{{ docker_network_name }}"
    connected:
      - postgres
  register: postgres_network_check
  ignore_errors: yes
  when: postgres_container_info.exists

- name: Remove existing PostgreSQL container if not in correct state
  docker_container:
    name: postgres
    state: absent
  when: >
    (postgres_container_info.exists and postgres_container_info.container.State.Status != 'running') or
    (postgres_container_info.exists and postgres_network_check is failed)

- name: Create PostgreSQL data directory
  file:
    path: "{{ postgres_data_dir }}"
    state: directory
    mode: '0755'
  when: not postgres_container_info.exists or postgres_container_info.container.State.Status != 'running'

- name: Run PostgreSQL Docker container
  docker_container:
    name: postgres
    image: "postgres:{{ postgres_version }}"
    state: started
    restart_policy: always
    ports:
      - "{{ postgres_port }}:5432"
    expose:
      - "5432"
    env:
      POSTGRES_PASSWORD: "{{ postgres_password }}"
    volumes:
      - "{{ postgres_data_dir }}:/var/lib/postgresql/data"
    networks:
      - name: "{{ docker_network_name }}"
  when: not postgres_container_info.exists or postgres_container_info.container.State.Status != 'running'

- name: Wait for PostgreSQL to be ready
  wait_for:
    host: localhost
    port: "{{ postgres_port }}"
    delay: 10
    timeout: 60
  when: not postgres_container_info.exists or postgres_container_info.container.State.Status != 'running'

- name: Check PostgreSQL connection
  command: >
    docker exec postgres psql -U postgres -c "SELECT 1"
  register: postgres_check
  changed_when: false
  failed_when: postgres_check.rc != 0
  retries: 5
  delay: 10
  until: postgres_check.rc == 0
