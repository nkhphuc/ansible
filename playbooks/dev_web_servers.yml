---
- name: Playbook to deploy and run nkhphuc/template7pg as deploy_user
  hosts: dev_web_servers
  become: yes
  vars:
    postgres_password: password
    postgres_data_dir: /var/lib/postgresql/data
    postgres_version: "16"
    postgres_port: "5432"
    dragonfly_port: "6379"
    rails_master_key: "{{ vault_rails_master_key }}"
    template7pg_port: "3000"

  tasks:
    # - name: Task as ec2_user
    #   ansible.builtin.command:
    #     cmd: echo "This is ec2_user"

    # - name: Task as deploy_user
    #   ansible.builtin.command:
    #     cmd: echo "This is deploy_user"
    #   become: yes
    #   become_user: "{{ deploy_user }}"
    #   vars:
    #     ansible_ssh_private_key_file: "{{ deploy_user_key }}"

    # - name: Task that requires super user privileges
    #   ansible.builtin.command:
    #     cmd: echo "This is root"
    #   become: yes
    #   become_user: root

    - name: Debug vault variables
      debug:
        msg: "Rails Master Key: {{ vault_rails_master_key }}"

    - name: Create PostgreSQL data directory
      file:
        path: "{{ postgres_data_dir }}"
        state: directory
        mode: '0755'

    - name: Run PostgreSQL Docker container
      docker_container:
        name: postgres
        image: "postgres:{{ postgres_version }}"
        state: started
        restart_policy: always
        ports:
          - "{{ postgres_port }}:5432"
        env:
          POSTGRES_PASSWORD: "{{ postgres_password }}"
        volumes:
          - "{{ postgres_data_dir }}:/var/lib/postgresql/data"

    - name: Check if PostgreSQL container is running
      docker_container_info:
        name: postgres
      register: postgres_container_info

    - name: Display PostgreSQL container status
      debug:
        msg: "PostgreSQL container is {{ 'running' if postgres_container_info.container.State.Running else 'not running' }}"

    - name: Ensure PostgreSQL container is running
      assert:
        that:
          - postgres_container_info.container.State.Running
        fail_msg: "PostgreSQL container is not running"
        success_msg: "PostgreSQL container is running correctly"

    - name: Run DragonflyDB Docker container
      docker_container:
        name: dragonflydb
        image: docker.dragonflydb.io/dragonflydb/dragonfly
        state: started
        restart_policy: always
        ports:
          - "{{ dragonfly_port }}:6379"

    - name: Check if DragonflyDB container is running
      docker_container_info:
        name: dragonflydb
      register: dragonfly_container_info

    - name: Display DragonflyDB container status
      debug:
        msg: "DragonflyDB container is {{ 'running' if dragonfly_container_info.container.State.Running else 'not running' }}"

    - name: Ensure DragonflyDB container is running
      assert:
        that:
          - dragonfly_container_info.container.State.Running
        fail_msg: "DragonflyDB container is not running"
        success_msg: "DragonflyDB container is running correctly"

    - name: Ensure deploy_user is in the docker group
      user:
        name: "{{ deploy_user }}"
        groups: docker
        append: yes

    - name: Pull nkhphuc/template7pg:latest Docker image
      docker_image:
        name: nkhphuc/template7pg
        source: pull
        tag: latest
      become: yes
      become_user: "{{ deploy_user }}"

    - name: Run nkhphuc/template7pg Docker container
      docker_container:
        name: template7pg
        image: nkhphuc/template7pg:latest
        state: started
        restart_policy: always
        ports:
          - "{{ template7pg_port }}:3000"
        env:
          RAILS_MASTER_KEY: "{{ rails_master_key }}"
          # Add any other necessary environment variables here
      become: yes
      become_user: "{{ deploy_user }}"

    - name: Check if template7pg container is running
      docker_container_info:
        name: template7pg
      register: template7pg_container_info
      become: yes
      become_user: "{{ deploy_user }}"

    - name: Display template7pg container status
      debug:
        msg: "template7pg container is {{ 'running' if template7pg_container_info.container.State.Running else 'not running' }}"

    - name: Ensure template7pg container is running
      assert:
        that:
          - template7pg_container_info.container.State.Running
        fail_msg: "template7pg container is not running"
        success_msg: "template7pg container is running correctly"

    - name: Get Docker logs for template7pg container
      command: docker logs --tail 100 template7pg
      register: template7pg_logs
      become: yes
      become_user: "{{ deploy_user }}"

    - name: Display template7pg container logs
      debug:
        msg: "{{ template7pg_logs.stdout_lines }}"

    - name: Remove stopped containers
      docker_prune:
        containers: yes

    - name: Remove unused images
      docker_prune:
        images: yes
